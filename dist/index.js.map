{"version":3,"sources":["../src/index.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAEA,MAAM,QAAQ,MAAM,SAAN,CAAgB,KAAhB;;;;;;;;;;;;;;;AAed,WAAS,MAAT,CAAgB,KAAhB,EAAuB,MAAvB,EAA+B;AAC7B,QAAI,OAAO,wBAAc,KAAd,CAAP,CADyB;AAE7B,QAAI,OAAO,MAAP,IAAiB,QAAjB,IAA6B,UAAU,UAAV,IAAwB,UAAU,SAAV,EAAqB;AAC5E,UAAI,KAAK,KAAK,MAAL,CAAL,CADwE;AAE5E,UAAI,OAAO,EAAP,KAAc,UAAd,EAA0B;AAC5B,YAAI,OAAO,MAAM,IAAN,CAAW,SAAX,EAAsB,CAAtB,CAAP,CADwB;AAE5B,WAAG,KAAH,CAAS,IAAT,EAAe,IAAf,EAF4B;OAA9B;KAFF;AAOA,WAAO,IAAP,CAT6B;GAA/B;;AAYA,WAAS,IAAT,CAAc,IAAd,EAAoB;AAClB,QAAI,CAAC,KAAK,GAAL,CAAS,SAAT,CAAmB,MAAnB,EAA2B;AAC9B,WAAK,GAAL,CAAS,SAAT,CAAmB,MAAnB,GAA4B,MAA5B,CAD8B;KAAhC;GADF;;AAMA,OAAK,MAAL;;AAEA,SAAO,OAAP,GAAiB,IAAjB","file":"index.js","sourcesContent":["import Formatter, {extend} from './formatter';\n\nconst slice = Array.prototype.slice;\n\n/**\n* format a given value in the riot tag context\n* usage:\n*   create a riot tag\n* <pre>\n*   <app>\n      <p> {format(new Date(), 'date', 'yyyy-mm-dd HH:MM:ss')} </p>\n*   </app>\n* </pre>\n* @param {any} value      the value passed in to be formatted\n* @param {string} method  the format method of Formatter\n* @return {any} the formatted result\n*/\nfunction format(value, method) {\n  let self = new Formatter(value);\n  if (typeof method == 'string' && method != 'toString' && method != 'valueOf') {\n    let fn = self[method];\n    if (typeof fn === 'function') {\n      let args = slice.call(arguments, 2);\n      fn.apply(self, args);\n    }\n  }\n  return self;\n}\n\nfunction hook(riot) {\n  if (!riot.Tag.prototype.format) {\n    riot.Tag.prototype.format = format;\n  }\n}\n\nhook.define = extend;\n\nmodule.exports = hook;\n"]}